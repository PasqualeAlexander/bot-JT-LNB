/**
 * FUNCIONES DE BASE DE DATOS MYSQL PARA LNB BOT
 * =============================================
 * 
 * Este archivo contiene todas las funciones de base de datos
 * adaptadas para usar MySQL en lugar de SQLite
 */

const { executeQuery, executeTransaction } = require('../config/database');

const dbFunctions = {
    // ====================== FUNCIONES DE JUGADORES ======================
    
    // Guardar/actualizar jugador (por auth_id o nombre como fallback)
    guardarJugador: async (identificador, stats, authId = null) => {
        // Si se proporciona authId, usar sistema basado en auth_id
        if (authId) {
            return await dbFunctions.guardarJugadorPorAuth(authId, identificador, stats);
        }
        
        // Fallback: sistema anterior por nombre
        const query = `INSERT INTO jugadores 
                      (nombre, partidos, victorias, derrotas, goles, asistencias, autogoles, 
                       mejorRachaGoles, mejorRachaAsistencias, hatTricks, vallasInvictas, 
                       tiempoJugado, promedioGoles, promedioAsistencias, fechaPrimerPartido, 
                       fechaUltimoPartido, xp, nivel, codigoRecuperacion, fechaCodigoCreado, mvps, updated_at)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                      ON DUPLICATE KEY UPDATE
                      partidos = VALUES(partidos), victorias = VALUES(victorias), derrotas = VALUES(derrotas),
                      goles = VALUES(goles), asistencias = VALUES(asistencias), autogoles = VALUES(autogoles),
                      mejorRachaGoles = VALUES(mejorRachaGoles), mejorRachaAsistencias = VALUES(mejorRachaAsistencias),
                      hatTricks = VALUES(hatTricks), vallasInvictas = VALUES(vallasInvictas),
                      tiempoJugado = VALUES(tiempoJugado), promedioGoles = VALUES(promedioGoles),
                      promedioAsistencias = VALUES(promedioAsistencias), fechaPrimerPartido = VALUES(fechaPrimerPartido),
                      fechaUltimoPartido = VALUES(fechaUltimoPartido), xp = VALUES(xp), nivel = VALUES(nivel),
                      codigoRecuperacion = VALUES(codigoRecuperacion), fechaCodigoCreado = VALUES(fechaCodigoCreado),
                      mvps = VALUES(mvps), updated_at = CURRENT_TIMESTAMP`;
        
        try {
            const result = await executeQuery(query, [
                identificador, stats.partidos, stats.victorias, stats.derrotas, stats.goles, 
                stats.asistencias, stats.autogoles, stats.mejorRachaGoles, stats.mejorRachaAsistencias, 
                stats.hatTricks, stats.vallasInvictas, stats.tiempoJugado, stats.promedioGoles, 
                stats.promedioAsistencias, stats.fechaPrimerPartido, stats.fechaUltimoPartido, 
                stats.xp ?? 40, stats.nivel ?? 1, stats.codigoRecuperacion ?? null, stats.fechaCodigoCreado ?? null,
                stats.mvps ?? 0
            ]);
            return result.insertId || result.affectedRows;
        } catch (error) {
            console.error('‚ùå Error guardando jugador:', error);
            throw error;
        }
    },
    
    // Obtener jugador
    obtenerJugador: async (nombre) => {
        const query = 'SELECT * FROM jugadores WHERE nombre = ?';
        try {
            const results = await executeQuery(query, [nombre]);
            return results[0] || null;
        } catch (error) {
            console.error('‚ùå Error obteniendo jugador:', error);
            throw error;
        }
    },

    // Cargar estad√≠sticas globales (ACTUALIZADO PARA USAR AUTH_ID)
    cargarEstadisticasGlobales: async () => {
        const query = 'SELECT * FROM jugadores ORDER BY partidos DESC';
        try {
            const rows = await executeQuery(query);
            
            // Formatear datos para coincidir con la estructura esperada
            const estadisticasFormateadas = {
                jugadores: {},
                records: {
                    mayorGoles: {jugador: "", cantidad: 0, fecha: ""},
                    mayorAsistencias: {jugador: "", cantidad: 0, fecha: ""},
                    partidoMasLargo: {duracion: 0, fecha: "", equipos: ""},
                    goleadaMasGrande: {diferencia: 0, resultado: "", fecha: ""},
                    hatTricks: [],
                    vallasInvictas: []
                },
                totalPartidos: 0,
                fechaCreacion: new Date().toISOString(),
                contadorJugadores: rows ? rows.length : 0
            };
            
            // Convertir filas de la base de datos a la estructura esperada
            // NUEVO: Usar auth_id como clave principal, con fallback a nombre
            if (rows && rows.length > 0) {
                rows.forEach(row => {
                    // Identificador √∫nico: usar auth_id si est√° disponible, sino usar nombre
                    const identificadorUnico = row.auth_id || row.nombre;
                    const nombreMostrar = row.nombre_display || row.nombre;
                    
                    estadisticasFormateadas.jugadores[identificadorUnico] = {
                        // Informaci√≥n de identificaci√≥n
                        auth_id: row.auth_id,
                        nombre: row.nombre,
                        nombre_display: nombreMostrar,
                        
                        // Estad√≠sticas del jugador
                        partidos: row.partidos || 0,
                        victorias: row.victorias || 0,
                        derrotas: row.derrotas || 0,
                        goles: row.goles || 0,
                        asistencias: row.asistencias || 0,
                        autogoles: row.autogoles || 0,
                        mejorRachaGoles: row.mejorRachaGoles || 0,
                        mejorRachaAsistencias: row.mejorRachaAsistencias || 0,
                        hatTricks: row.hatTricks || 0,
                        vallasInvictas: row.vallasInvictas || 0,
                        tiempoJugado: row.tiempoJugado || 0,
                        promedioGoles: parseFloat(row.promedioGoles) || 0.0,
                        promedioAsistencias: parseFloat(row.promedioAsistencias) || 0.0,
                        fechaPrimerPartido: row.fechaPrimerPartido || new Date().toISOString(),
                        fechaUltimoPartido: row.fechaUltimoPartido || new Date().toISOString(),
                        xp: row.xp || 40,
                        nivel: row.nivel || 1,
                        codigoRecuperacion: row.codigoRecuperacion || null,
                        fechaCodigoCreado: row.fechaCodigoCreado || null,
                        mvps: row.mvps || 0,
                        
                        // Metadata de identificaci√≥n
                        tipo_identificacion: row.auth_id ? 'auth' : 'nombre'
                    };
                });
                
                // Calcular records b√°sicos
                let maxGoles = 0, maxAsistencias = 0;
                Object.values(estadisticasFormateadas.jugadores).forEach(jugador => {
                    if (jugador.goles > maxGoles) {
                        maxGoles = jugador.goles;
                        estadisticasFormateadas.records.mayorGoles = {
                            jugador: jugador.nombre_display || jugador.nombre,
                            cantidad: jugador.goles,
                            fecha: jugador.fechaUltimoPartido
                        };
                    }
                    if (jugador.asistencias > maxAsistencias) {
                        maxAsistencias = jugador.asistencias;
                        estadisticasFormateadas.records.mayorAsistencias = {
                            jugador: jugador.nombre_display || jugador.nombre,
                            cantidad: jugador.asistencias,
                            fecha: jugador.fechaUltimoPartido
                        };
                    }
                    estadisticasFormateadas.totalPartidos += jugador.partidos;
                });
            }
            
            const jugadoresConAuth = Object.values(estadisticasFormateadas.jugadores).filter(j => j.auth_id).length;
            const jugadoresSinAuth = Object.values(estadisticasFormateadas.jugadores).filter(j => !j.auth_id).length;
            
            console.log(`üìä [AUTH-ID] Cargadas estad√≠sticas: ${Object.keys(estadisticasFormateadas.jugadores).length} jugadores`);
            console.log(`   - Con auth_id: ${jugadoresConAuth}`);
            console.log(`   - Sin auth_id: ${jugadoresSinAuth}`);
            
            return estadisticasFormateadas;
        } catch (error) {
            console.error('‚ùå Error cargando estad√≠sticas globales:', error);
            throw error;
        }
    },

    // Guardar estad√≠sticas globales (ACTUALIZADO PARA USAR AUTH_ID)
    guardarEstadisticasGlobales: async (datos) => {
        try {
            if (!datos || !datos.jugadores) {
                console.error('‚ùå [DB] Datos inv√°lidos para guardar estad√≠sticas globales');
                return false;
            }
            
            console.log(`üíæ [AUTH-ID] Guardando estad√≠sticas de ${Object.keys(datos.jugadores).length} jugadores...`);
            
            // Guardar cada jugador individualmente usando el sistema auth_id
            const jugadoresGuardados = [];
            const erroresDetallados = [];
            
            for (const [identificador, stats] of Object.entries(datos.jugadores)) {
                try {
                    // Determinar si el identificador es un auth_id o nombre
                    const esAuthId = stats.auth_id || stats.tipo_identificacion === 'auth';
                    const authId = esAuthId ? stats.auth_id || identificador : null;
                    const nombreJugador = stats.nombre_display || stats.nombre || identificador;
                    
                    if (authId) {
                        // Usar sistema basado en auth_id
                        await dbFunctions.guardarJugadorPorAuth(authId, nombreJugador, stats);
                        jugadoresGuardados.push(`${nombreJugador} (Auth: ${authId})`);
                        console.log(`üîÑ [AUTH-ID] Guardado: ${nombreJugador} -> ${authId}`);
                    } else {
                        // POL√çTICA: NO guardar jugadores sin auth_id
                        console.warn(`üö´ [POL√çTICA] Jugador sin auth_id NO guardado: ${nombreJugador}`);
                        erroresDetallados.push({
                            identificador: identificador,
                            nombre: nombreJugador,
                            auth_id: 'N/A',
                            error: 'Sin auth_id - pol√≠tica activa'
                        });
                    }
                } catch (error) {
                    const errorInfo = {
                        identificador: identificador,
                        nombre: stats.nombre || 'N/A',
                        auth_id: stats.auth_id || 'N/A',
                        error: error.message
                    };
                    erroresDetallados.push(errorInfo);
                    console.error(`‚ùå [DB] Error guardando jugador ${identificador}:`, error.message);
                }
            }
            
            // Reporte final
            const totalJugadores = Object.keys(datos.jugadores).length;
            const exitosos = jugadoresGuardados.length;
            const errores = erroresDetallados.length;
            
            console.log(`‚úÖ [AUTH-ID] Guardado completado: ${exitosos}/${totalJugadores} jugadores`);
            
            if (errores > 0) {
                console.warn(`‚ö†Ô∏è [AUTH-ID] ${errores} errores durante el guardado:`);
                erroresDetallados.forEach((err, i) => {
                    console.warn(`   ${i+1}. ${err.nombre} (ID: ${err.identificador}): ${err.error}`);
                });
            }
            
            return exitosos > 0;
        } catch (error) {
            console.error('‚ùå [DB] Error cr√≠tico en guardarEstadisticasGlobales:', error);
            throw error;
        }
    },
    
    // Obtener top jugadores
    obtenerTopJugadores: async (campo, limite = 10) => {
        const validCampos = ['goles', 'asistencias', 'partidos', 'victorias', 'hatTricks', 'vallasInvictas', 'mvps'];
        if (!validCampos.includes(campo)) {
            throw new Error('Campo inv√°lido');
        }
        
        // Validar que limite sea un n√∫mero v√°lido para evitar inyecci√≥n SQL
        const limiteNumero = parseInt(limite);
        if (isNaN(limiteNumero) || limiteNumero <= 0 || limiteNumero > 100) {
            throw new Error('L√≠mite inv√°lido');
        }
        
        // Construir query con LIMIT literal (no como par√°metro preparado)
        const query = `SELECT * FROM jugadores WHERE partidos > 0 ORDER BY ${campo} DESC LIMIT ${limiteNumero}`;
        try {
            const results = await executeQuery(query, []);
            return results;
        } catch (error) {
            console.error('‚ùå Error obteniendo top jugadores:', error);
            throw error;
        }
    },

    // Obtener Top desde la √∫ltima tabla de backup (fallback de temporada anterior)
    obtenerTopDesdeBackup: async (campo, limite = 10) => {
        try {
            const validCampos = ['goles', 'asistencias', 'partidos', 'victorias', 'hatTricks', 'vallasInvictas', 'mvps', 'autogoles'];
            if (!validCampos.includes(campo)) {
                throw new Error('Campo inv√°lido');
            }

            const schema = process.env.DB_NAME || 'lnb_estadisticas';

            // Buscar las √∫ltimas tablas de backup por nombre (YYYY_MM_DD_HHMMSS ordena lexicogr√°ficamente)
            const tablas = await executeQuery(
                `SELECT table_name AS nombre FROM information_schema.tables
                 WHERE table_schema = ? AND table_name LIKE 'temporada_backup_%'
                 ORDER BY table_name DESC LIMIT 5`,
                [schema]
            );

            if (!tablas || tablas.length === 0) {
                return { success: false, reason: 'sin_tablas_backup', data: [] };
            }

            // Validar l√≠mite
            const limiteNumero = parseInt(limite);
            const lim = (isNaN(limiteNumero) || limiteNumero <= 0 || limiteNumero > 100) ? 10 : limiteNumero;

            // Probar tablas en orden hasta encontrar una con datos
            for (const t of tablas) {
                const tabla = t.nombre;
                // Verificar si hay datos
                const countRes = await executeQuery(`SELECT COUNT(*) AS total FROM \`${tabla}\``);
                const total = (countRes && countRes[0] && countRes[0].total) ? countRes[0].total : 0;
                if (total === 0) continue;

                // Traer el top por el campo solicitado
                const query = `SELECT nombre, nombre_display, partidos, victorias, derrotas, goles, asistencias, autogoles,
                                      mejorRachaGoles, mejorRachaAsistencias, hatTricks, mvps, vallasInvictas, tiempoJugado
                               FROM \`${tabla}\`
                               ORDER BY ${campo} DESC, partidos DESC, nombre ASC
                               LIMIT ${lim}`;
                const rows = await executeQuery(query, []);
                return { success: true, table: tabla, data: rows };
            }

            return { success: false, reason: 'tablas_sin_datos', data: [] };
        } catch (error) {
            console.error('‚ùå Error en obtenerTopDesdeBackup:', error);
            return { success: false, error: error.message, data: [] };
        }
    },
    
    // ====================== FUNCIONES DE PARTIDOS ======================
    
    // Guardar partido
    guardarPartido: async (partidoData) => {
        const query = `INSERT INTO partidos (fecha, duracion, golesRed, golesBlue, mapa, mejorJugador)
                      VALUES (?, ?, ?, ?, ?, ?)`;
        
        try {
            const result = await executeQuery(query, [
                partidoData.fecha, partidoData.duracion, partidoData.golesRed, 
                partidoData.golesBlue, partidoData.mapa, partidoData.mejorJugador
            ]);
            return result.insertId;
        } catch (error) {
            console.error('‚ùå Error guardando partido:', error);
            throw error;
        }
    },
    
    // ====================== FUNCIONES VIP ======================
    
    // Activar VIP para un jugador
    activarVIP: async (nombreJugador) => {
        const fechaVIP = new Date().toISOString();
        const query = `UPDATE jugadores SET esVIP = 1, fechaVIP = ? WHERE nombre = ?`;
        
        try {
            const result = await executeQuery(query, [fechaVIP, nombreJugador]);
            if (result.affectedRows === 0) {
                throw new Error('Jugador no encontrado');
            }
            console.log(`‚úÖ VIP activado para ${nombreJugador} en ${fechaVIP}`);
            return { nombreJugador, fechaVIP, cambios: result.affectedRows };
        } catch (error) {
            console.error('‚ùå Error activando VIP:', error);
            throw error;
        }
    },
    
    // Desactivar VIP para un jugador
    desactivarVIP: async (nombreJugador) => {
        const query = `UPDATE jugadores SET esVIP = 0, fechaVIP = NULL WHERE nombre = ?`;
        
        try {
            const result = await executeQuery(query, [nombreJugador]);
            if (result.affectedRows === 0) {
                throw new Error('Jugador no encontrado');
            }
            console.log(`‚ùå VIP desactivado para ${nombreJugador}`);
            return { nombreJugador, cambios: result.affectedRows };
        } catch (error) {
            console.error('‚ùå Error desactivando VIP:', error);
            throw error;
        }
    },
    
    // Verificar si un jugador es VIP
    esJugadorVIP: async (nombreJugador) => {
        const query = `SELECT esVIP, fechaVIP FROM jugadores WHERE nombre = ?`;
        
        try {
            const results = await executeQuery(query, [nombreJugador]);
            const row = results[0];
            
            if (!row) {
                return { esVIP: false, fechaVIP: null };
            }
            
            const esVIP = row.esVIP === 1;
            const fechaVIP = row.fechaVIP;
            
            // Si es VIP, verificar que no haya expirado (30 d√≠as)
            if (esVIP && fechaVIP) {
                const fechaOtorgamiento = new Date(fechaVIP);
                const fechaExpiracion = new Date(fechaOtorgamiento.getTime() + (30 * 24 * 60 * 60 * 1000)); // 30 d√≠as
                const ahora = new Date();
                
                if (ahora > fechaExpiracion) {
                    // VIP expirado - desactivar autom√°ticamente
                    try {
                        await dbFunctions.desactivarVIP(nombreJugador);
                        return { esVIP: false, fechaVIP: null, expirado: true };
                    } catch (error) {
                        console.error(`Error al desactivar VIP expirado para ${nombreJugador}:`, error);
                        return { esVIP: false, fechaVIP: null, expirado: true };
                    }
                } else {
                    return { esVIP: true, fechaVIP: fechaVIP, diasRestantes: Math.ceil((fechaExpiracion - ahora) / (24 * 60 * 60 * 1000)) };
                }
            } else {
                return { esVIP: false, fechaVIP: null };
            }
        } catch (error) {
            console.error('‚ùå Error verificando VIP:', error);
            throw error;
        }
    },
    
    // Obtener lista de jugadores VIP activos
    obtenerJugadoresVIP: async () => {
        const query = `SELECT nombre, fechaVIP FROM jugadores WHERE esVIP = 1 ORDER BY fechaVIP DESC`;
        
        try {
            const results = await executeQuery(query);
            const jugadoresVIP = results.map(row => {
                const fechaOtorgamiento = new Date(row.fechaVIP);
                const fechaExpiracion = new Date(fechaOtorgamiento.getTime() + (30 * 24 * 60 * 60 * 1000));
                const ahora = new Date();
                const diasRestantes = Math.ceil((fechaExpiracion - ahora) / (24 * 60 * 60 * 1000));
                
                return {
                    nombre: row.nombre,
                    fechaVIP: row.fechaVIP,
                    diasRestantes: diasRestantes,
                    expirado: diasRestantes <= 0
                };
            });
            
            return jugadoresVIP;
        } catch (error) {
            console.error('‚ùå Error obteniendo jugadores VIP:', error);
            throw error;
        }
    },
    
    // Limpiar VIPs expirados autom√°ticamente
    limpiarVIPsExpirados: async () => {
        try {
            // Primero obtener los VIPs que van a expirar
            const selectQuery = `SELECT nombre, fechaVIP FROM jugadores 
                                WHERE esVIP = 1 
                                AND DATE_ADD(STR_TO_DATE(fechaVIP, '%Y-%m-%dT%H:%i:%s.%fZ'), INTERVAL 30 DAY) < NOW()`;
            
            const expiredVips = await executeQuery(selectQuery);
            
            if (expiredVips.length === 0) {
                return { vipsExpirados: 0, jugadores: [] };
            }
            
            // Desactivar VIPs expirados
            const updateQuery = `UPDATE jugadores 
                                SET esVIP = 0, fechaVIP = NULL 
                                WHERE esVIP = 1 
                                AND DATE_ADD(STR_TO_DATE(fechaVIP, '%Y-%m-%dT%H:%i:%s.%fZ'), INTERVAL 30 DAY) < NOW()`;
            
            const result = await executeQuery(updateQuery);
            
            console.log(`üßπ ${result.affectedRows} VIPs expirados limpiados autom√°ticamente`);
            return { 
                vipsExpirados: result.affectedRows, 
                jugadores: expiredVips.map(r => ({
                    nombre: r.nombre,
                    fechaVIP: r.fechaVIP,
                    diasVencido: Math.floor((new Date() - new Date(r.fechaVIP)) / (1000 * 60 * 60 * 24)) - 30
                }))
            };
        } catch (error) {
            console.error('‚ùå Error limpiando VIPs expirados:', error);
            throw error;
        }
    },
    
    // ====================== FUNCIONES DE CONEXIONES ======================
    
    // Registrar nueva conexi√≥n
    registrarConexion: async (nombreJugador, authJugador, ipSimulada, identificadorConexion) => {
        try {
            // Primero eliminar conexi√≥n existente si hay una
            const deleteQuery = `DELETE FROM conexiones_activas WHERE identificador_conexion = ?`;
            await executeQuery(deleteQuery, [identificadorConexion]);
            
            // Insertar nueva conexi√≥n
            const insertQuery = `INSERT INTO conexiones_activas 
                                (nombre_jugador, auth_jugador, ip_simulada, identificador_conexion)
                                VALUES (?, ?, ?, ?)`;
            
            const result = await executeQuery(insertQuery, [nombreJugador, authJugador, ipSimulada, identificadorConexion]);
            console.log(`üîó Nueva conexi√≥n registrada: ${nombreJugador} (${ipSimulada})`);
            return result.insertId;
        } catch (error) {
            console.error('‚ùå Error registrando conexi√≥n:', error);
            throw error;
        }
    },
    
    // Verificar conexiones existentes
    verificarConexionesExistentes: async (nombreJugador, authJugador = null) => {
        try {
            // Primero limpiar conexiones inactivas autom√°ticamente
            await dbFunctions.limpiarConexionesInactivas();
            
            let query = `SELECT * FROM conexiones_activas 
                        WHERE activa = 1 AND (nombre_jugador = ?`;
            let params = [nombreJugador];
            
            if (authJugador) {
                query += ` OR auth_jugador = ?`;
                params.push(authJugador);
            }
            
            query += `)`;
            
            const results = await executeQuery(query, params);
            const conexionesActivas = results.length;
            const tieneConexionesMultiples = conexionesActivas >= 2;
            
            console.log(`üîç Verificaci√≥n de conexiones para ${nombreJugador}: ${conexionesActivas} activas`);
            
            // Si hay exactamente una conexi√≥n activa, verificar si es del mismo jugador
            if (conexionesActivas === 1 && results.length > 0) {
                const conexionExistente = results[0];
                if (conexionExistente.auth_jugador === authJugador) {
                    console.log(`‚úÖ Conexi√≥n permitida: misma sesi√≥n de ${nombreJugador}`);
                    return {
                        tieneConexionesMultiples: false,
                        conexionesActivas: 0,
                        detalles: []
                    };
                }
            }
            
            return {
                tieneConexionesMultiples,
                conexionesActivas,
                detalles: results
            };
        } catch (error) {
            console.error('‚ùå Error verificando conexiones existentes:', error);
            throw error;
        }
    },
    
    // Limpiar conexiones inactivas
    limpiarConexionesInactivas: async () => {
        const query = `UPDATE conexiones_activas 
                      SET activa = 0 
                      WHERE activa = 1 
                      AND ultima_actividad < DATE_SUB(NOW(), INTERVAL 10 MINUTE)`;
        
        try {
            const result = await executeQuery(query);
            if (result.affectedRows > 0) {
                console.log(`üßπ ${result.affectedRows} conexiones inactivas limpiadas`);
            }
            return result.affectedRows;
        } catch (error) {
            console.error('‚ùå Error limpiando conexiones inactivas:', error);
            throw error;
        }
    },
    
    // ====================== FUNCIONES DE BANEOS ======================
    
    // Crear baneo en la nueva tabla baneos
        // PARCHE ZONA HORARIA UTC - Asegurar que se use UTC
    crearBaneo: async (authId, nombre, razon, admin, duracion = 0) => {
        // Si no se proporciona raz√≥n, usar valor por defecto
        const razonFinal = razon || 'Baneado por admin';
        
        // PARCHE: Establecer zona horaria UTC para esta operaci√≥n
        await executeQuery("SET SESSION time_zone = '+00:00'");
        
        const query = `INSERT INTO baneos (auth_id, nombre, razon, admin, fecha, duracion, activo)
                      VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, 1)`;
        
        try {
            const result = await executeQuery(query, [authId, nombre, razonFinal, admin, duracion]);
            console.log(`‚úÖ Nuevo baneo creado: ${nombre} (ID: ${result.insertId})`);
            return {
                id: result.insertId,
                authId: authId,
                nombre: nombre,
                razon: razon,
                admin: admin,
                duracion: duracion
            };
        } catch (error) {
            console.error('‚ùå Error creando baneo:', error);
            throw error;
        }
    },
    
    // PARCHE ZONA HORARIA UTC - Verificar si un jugador est√° baneado (nueva tabla) - versi√≥n que devuelve promesa
    estaBaneadoPromise: async (authId) => {
        try {
            // PARCHE: Establecer zona horaria UTC para esta operaci√≥n
            await executeQuery("SET SESSION time_zone = '+00:00'");
            
            const query = `SELECT * FROM baneos 
                          WHERE nombre = ? AND activo = 1 
                          ORDER BY fecha DESC LIMIT 1`;
            
            const results = await executeQuery(query, [authId]);
            const row = results[0];
            
            if (!row) {
                return false;
            }
            
            // Verificar si el baneo temporal ha expirado
            if (row.duracion > 0) {
                // PARCHE: Usar la fecha directamente de MySQL (ya est√° en UTC por UTC_TIMESTAMP())
                const fechaBan = new Date(row.fecha); // MySQL ya devuelve fecha UTC correcta
                const ahora = new Date(); // UTC
                const tiempoTranscurrido = ahora.getTime() - fechaBan.getTime();
                const tiempoLimite = row.duracion * 60 * 1000; // duracion en minutos a milisegundos
                
                if (tiempoTranscurrido >= tiempoLimite) {
                    // Baneo temporal expirado, desactivar autom√°ticamente
                    try {
                        await dbFunctions.desactivarBaneo(row.id);
                        console.log(`‚è∞ Baneo temporal expirado autom√°ticamente: ${row.nombre}`);
                        return false;
                    } catch (error) {
                        return false;
                    }
                }
            }
            
            return row;
        } catch (error) {
            console.error('‚ùå Error verificando baneo:', error);
            return false;
        }
    },
    
    // Verificar si un jugador est√° baneado (nueva tabla) - versi√≥n callback mejorada
    estaBaneado: (authId, callback) => {
        // Validar que callback sea una funci√≥n y crear un callback por defecto si no es v√°lido
        if (typeof callback !== 'function') {
            console.error('‚ùå ERROR: estaBaneado requiere un callback v√°lido como segundo par√°metro');
            console.error('‚ùå Tipo de callback recibido:', typeof callback);
            console.error('‚ùå Valor de callback:', callback);
            // Usar un callback por defecto en lugar de fallar
            callback = (result) => {
                console.log('‚ö†Ô∏è Usando callback por defecto para estaBaneado, resultado:', result ? 'baneado' : 'no baneado');
            };
        }
        
        // Usar la versi√≥n de promesa internamente
        dbFunctions.estaBaneadoPromise(authId)
            .then(result => {
                if (typeof callback === 'function') {
                    callback(result);
                }
            })
            .catch(error => {
                console.error('‚ùå Error en estaBaneado callback:', error);
                if (typeof callback === 'function') {
                    callback(false);
                }
            });
    },
    
    // Desactivar baneo
    desactivarBaneo: async (baneoId) => {
        const query = `UPDATE baneos SET activo = 0 WHERE id = ?`;
        
        try {
            const result = await executeQuery(query, [baneoId]);
            console.log(`‚úÖ Baneo desactivado: ID ${baneoId}`);
            return {
                baneoId: baneoId,
                cambios: result.affectedRows
            };
        } catch (error) {
            console.error('‚ùå Error desactivando baneo:', error);
            throw error;
        }
    },
    
    // Desbanear por auth_id
    desbanearJugadorNuevo: async (authId) => {
        try {
            // Primero obtener informaci√≥n del baneo activo
            const selectQuery = `SELECT * FROM baneos WHERE nombre = ? AND activo = 1 LIMIT 1`;
            const results = await executeQuery(selectQuery, [authId]);
            const baneo = results[0];
            
            if (!baneo) {
                throw new Error('No se encontr√≥ baneo activo para este jugador');
            }
            
            // Desactivar el baneo
            const updateQuery = `UPDATE baneos SET activo = 0 WHERE nombre = ? AND activo = 1`;
            const result = await executeQuery(updateQuery, [authId]);
            
            console.log(`‚úÖ Jugador desbaneado: ${baneo.nombre} (Auth: ${authId})`);
            return {
                authId: authId,
                nombre: baneo.nombre,
                fechaBanOriginal: baneo.fecha,
                razonOriginal: baneo.razon,
                adminOriginal: baneo.admin,
                cambios: result.affectedRows
            };
        } catch (error) {
            console.error('‚ùå Error desbaneando jugador:', error);
            throw error;
        }
    },
    
    // Obtener baneos activos
        // PARCHE ZONA HORARIA UTC - Obtener baneos activos
    obtenerBaneosActivos: async () => {
        try {
            // PARCHE: Establecer zona horaria UTC para esta operaci√≥n
            await executeQuery("SET SESSION time_zone = '+00:00'");
            
            const query = `SELECT * FROM baneos WHERE activo = 1 ORDER BY fecha DESC`;
            const rows = await executeQuery(query);
            
            const ahora = new Date(); // UTC
            const baneosRealmenteActivos = [];
            const baneosExpiradosALimpiar = [];
            
            // Procesar cada baneo para verificar si realmente est√° activo
            for (const row of rows) {
                // Verificar si es baneo temporal
                if (row.duracion > 0) {
                    // PARCHE: Usar la fecha directamente de MySQL (ya est√° en UTC por UTC_TIMESTAMP())
                    const fechaBan = new Date(row.fecha); // MySQL ya devuelve fecha UTC correcta
                    const tiempoTranscurrido = ahora.getTime() - fechaBan.getTime();
                    const tiempoLimite = row.duracion * 60 * 1000; // duraci√≥n en minutos a milisegundos
                    
                    if (tiempoTranscurrido >= tiempoLimite) {
                        // Baneo temporal expirado
                        console.log(`‚è∞ Detectado baneo temporal expirado: ${row.nombre} (${Math.floor(tiempoTranscurrido / (60 * 1000))} min transcurridos de ${row.duracion} min l√≠mite)`);
                        baneosExpiradosALimpiar.push(row.id);
                        continue; // No incluir en la lista de activos
                    }
                }
                
                // Baneo realmente activo (permanente o temporal no expirado)
                baneosRealmenteActivos.push({
                    id: row.id,
                    authId: row.auth_id,
                    nombre: row.nombre,
                    razon: row.razon,
                    admin: row.admin,
                    fecha: row.fecha,
                    duracion: row.duracion,
                    diasBaneado: Math.floor((ahora - new Date(row.fecha)) / (1000 * 60 * 60 * 24))
                });
            }
            
            // Limpiar autom√°ticamente baneos temporales expirados
            if (baneosExpiradosALimpiar.length > 0) {
                console.log(`üßπ Limpiando autom√°ticamente ${baneosExpiradosALimpiar.length} baneos temporales expirados...`);
                
                for (const baneoId of baneosExpiradosALimpiar) {
                    try {
                        await dbFunctions.desactivarBaneo(baneoId);
                        console.log(`‚úÖ Baneo temporal expirado limpiado: ID ${baneoId}`);
                    } catch (cleanupError) {
                        console.error(`‚ùå Error limpiando baneo expirado ID ${baneoId}:`, cleanupError);
                    }
                }
            }
            
            console.log(`üìä Baneos procesados: ${rows.length} total, ${baneosRealmenteActivos.length} realmente activos, ${baneosExpiradosALimpiar.length} expirados limpiados`);
            return baneosRealmenteActivos;
        } catch (error) {
            console.error('‚ùå Error obteniendo baneos activos:', error);
            throw error;
        }
    },
    
    // Obtener TODOS los jugadores (para carga completa de estad√≠sticas)
    obtenerTodosJugadores: async () => {
        try {
            const query = `
                SELECT auth_id, nombre, nombre_display, partidos, victorias, derrotas, goles, asistencias, 
                       autogoles, mejorRachaGoles, mejorRachaAsistencias, hatTricks, 
                       vallasInvictas, tiempoJugado, promedioGoles, promedioAsistencias,
                       fechaPrimerPartido, fechaUltimoPartido, xp, nivel, mvps,
                       codigoRecuperacion, fechaCodigoCreado
                FROM jugadores
                ORDER BY nombre
            `;
            
            const result = await executeQuery(query);
            console.log(`[DB] üìä ${result.length} jugadores cargados desde DB`);
            return result;
        } catch (error) {
            console.error('[DB] ‚ùå Error al obtener todos los jugadores:', error);
            return [];
        }
    },
    
    // ====================== FUNCIONES DE UID Y BANEOS ======================
    
    // Registrar/actualizar UID de un jugador
    actualizarUID: async (nombreJugador, uid) => {
        try {
            // Primero verificar si el jugador existe
            const selectQuery = 'SELECT id FROM jugadores WHERE nombre = ?';
            const existingPlayer = await executeQuery(selectQuery, [nombreJugador]);
            
            if (existingPlayer.length > 0) {
                // Jugador existe, actualizar UID
                const updateQuery = 'UPDATE jugadores SET uid = ? WHERE nombre = ?';
                const result = await executeQuery(updateQuery, [uid, nombreJugador]);
                console.log(`‚úÖ UID actualizado para ${nombreJugador}: ${uid}`);
                return { jugadorId: existingPlayer[0].id, uid: uid, actualizado: true };
            } else {
                // Jugador no existe, crear con UID
                const fechaActual = new Date().toISOString();
                const insertQuery = `INSERT INTO jugadores (nombre, uid, partidos, victorias, derrotas, 
                                    goles, asistencias, autogoles, xp, nivel, fechaPrimerPartido, fechaUltimoPartido)
                                    VALUES (?, ?, 0, 0, 0, 0, 0, 0, 40, 1, ?, ?)`;
                
                const result = await executeQuery(insertQuery, [nombreJugador, uid, fechaActual, fechaActual]);
                console.log(`‚úÖ Jugador creado con UID ${nombreJugador}: ${uid}`);
                return { jugadorId: result.insertId, uid: uid, actualizado: false };
            }
        } catch (error) {
            console.error('‚ùå Error actualizando UID:', error);
            throw error;
        }
    },
    
    // Banear jugador en base de datos
    banearJugador: async (nombreJugador, uid, adminNombre, razon = 'Baneado por admin', tiempoMinutos = null) => {
        try {
            const fechaBan = new Date().toISOString();
            
            console.log(`üìä [DB] Iniciando proceso de baneo para: ${nombreJugador} con UID: ${uid}`);
            console.log(`üìä [DB] Par√°metros - Admin: ${adminNombre}, Raz√≥n: ${razon}, Tiempo: ${tiempoMinutos}`);
            
            // Primero asegurar que el jugador tenga UID
            await dbFunctions.actualizarUID(nombreJugador, uid);
            console.log(`‚úÖ [DB] UID actualizado correctamente para ${nombreJugador}`);
            
            // Usar una consulta m√°s espec√≠fica para evitar problemas
            const query = `UPDATE jugadores 
                          SET baneado = 1, fecha_ban = ?, razon_ban = ?, admin_ban = ? 
                          WHERE uid = ?`;
            
            console.log(`üìä [DB] Ejecutando consulta de baneo con par√°metros:`, [fechaBan, razon, adminNombre, uid]);
            
            const result = await executeQuery(query, [fechaBan, razon, adminNombre, uid]);
            
            if (result.affectedRows === 0) {
                console.warn(`‚ö†Ô∏è [DB] No se encontr√≥ jugador con UID ${uid} para banear`);
                
                // Intentar con una b√∫squeda por nombre como respaldo
                const fallbackQuery = `UPDATE jugadores 
                                      SET baneado = 1, fecha_ban = ?, razon_ban = ?, admin_ban = ? 
                                      WHERE nombre = ?`;
                
                console.log(`üîÑ [DB] Intentando baneo por nombre: ${nombreJugador}`);
                
                const fallbackResult = await executeQuery(fallbackQuery, [fechaBan, razon, adminNombre, nombreJugador]);
                
                if (fallbackResult.affectedRows === 0) {
                    const error = new Error(`Jugador no encontrado para banear: ${nombreJugador} (UID: ${uid})`);
                    console.error(`‚ùå [DB] ${error.message}`);
                    throw error;
                } else {
                    console.log(`‚úÖ [DB] Jugador baneado por nombre: ${nombreJugador} (${fallbackResult.affectedRows} cambios)`);
                    return {
                        nombreJugador,
                        uid,
                        adminNombre,
                        razon,
                        fechaBan,
                        tiempoMinutos,
                        cambios: fallbackResult.affectedRows,
                        metodo: 'por_nombre'
                    };
                }
            } else {
                console.log(`‚úÖ [DB] Jugador baneado exitosamente: ${nombreJugador} (UID: ${uid}) por ${adminNombre}`);
                console.log(`üìä [DB] Cambios realizados: ${result.affectedRows}`);
                return {
                    nombreJugador,
                    uid,
                    adminNombre,
                    razon,
                    fechaBan,
                    tiempoMinutos,
                    cambios: result.affectedRows,
                    metodo: 'por_uid'
                };
            }
        } catch (error) {
            console.error('‚ùå Error en banearJugador:', error);
            throw error;
        }
    },
    
    // Eliminar cuentas inactivas
    eliminarCuentasInactivas: async () => {
        try {
            // Primero contar cu√°ntas cuentas ser√°n eliminadas
            const countQuery = `SELECT COUNT(*) as count FROM jugadores 
                               WHERE STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') < DATE_SUB(NOW(), INTERVAL 90 DAY)`;
            
            const countResult = await executeQuery(countQuery);
            const cuentasAEliminar = countResult[0].count;
            console.log(`üßπ Se encontraron ${cuentasAEliminar} cuentas inactivas por m√°s de 90 d√≠as`);
            
            if (cuentasAEliminar === 0) {
                return { eliminadas: 0, mensaje: 'No hay cuentas inactivas para eliminar' };
            }
            
            // Obtener nombres de las cuentas que ser√°n eliminadas (para log)
            const selectQuery = `SELECT nombre, fechaUltimoPartido FROM jugadores 
                                WHERE STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') < DATE_SUB(NOW(), INTERVAL 90 DAY)`;
            
            const cuentas = await executeQuery(selectQuery);
            
            // Log de las cuentas que ser√°n eliminadas
            console.log('üìã Cuentas que ser√°n eliminadas:');
            cuentas.forEach(jugador => {
                const diasInactivo = Math.floor((new Date() - new Date(jugador.fechaUltimoPartido)) / (1000 * 60 * 60 * 24));
                console.log(`  - ${jugador.nombre} (${diasInactivo} d√≠as inactivo)`);
            });
            
            // Proceder con la eliminaci√≥n
            const deleteQuery = `DELETE FROM jugadores 
                                WHERE STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') < DATE_SUB(NOW(), INTERVAL 90 DAY)`;
            
            const result = await executeQuery(deleteQuery);
            
            console.log(`‚úÖ ${result.affectedRows} cuentas inactivas eliminadas exitosamente`);
            return { 
                eliminadas: result.affectedRows, 
                mensaje: `Se eliminaron ${result.affectedRows} cuentas inactivas por m√°s de 90 d√≠as`,
                cuentas: cuentas.map(r => ({ nombre: r.nombre, fechaUltimoPartido: r.fechaUltimoPartido }))
            };
        } catch (error) {
            console.error('‚ùå Error eliminando cuentas inactivas:', error);
            throw error;
        }
    },
    
    // Obtener estad√≠sticas de inactividad
    obtenerEstadisticasInactividad: async () => {
        try {
            const queries = {
                total: 'SELECT COUNT(*) as count FROM jugadores',
                inactivas30: `SELECT COUNT(*) as count FROM jugadores WHERE STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') < DATE_SUB(NOW(), INTERVAL 30 DAY)`,
                inactivas60: `SELECT COUNT(*) as count FROM jugadores WHERE STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') < DATE_SUB(NOW(), INTERVAL 60 DAY)`,
                inactivas90: `SELECT COUNT(*) as count FROM jugadores WHERE STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') < DATE_SUB(NOW(), INTERVAL 90 DAY)`,
            };
            
            const resultados = {};
            
            for (const [key, query] of Object.entries(queries)) {
                const result = await executeQuery(query);
                resultados[key] = result[0].count;
            }
            
            // Obtener pr√≥ximas a eliminar
            const proximasQuery = `SELECT nombre, fechaUltimoPartido FROM jugadores 
                                  WHERE STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') < DATE_SUB(NOW(), INTERVAL 80 DAY)
                                  AND STR_TO_DATE(fechaUltimoPartido, '%Y-%m-%dT%H:%i:%s.%fZ') >= DATE_SUB(NOW(), INTERVAL 90 DAY)
                                  ORDER BY fechaUltimoPartido ASC`;
            
            resultados.proximasEliminar = await executeQuery(proximasQuery);
            
            return resultados;
        } catch (error) {
            console.error('‚ùå Error obteniendo estad√≠sticas de inactividad:', error);
            throw error;
        }
    },
    
    // ====================== FUNCIONES PARA AUTH_ID SYSTEM ======================
    
    // Guardar/actualizar jugador por auth_id
    guardarJugadorPorAuth: async (authId, nombreActual, stats) => {
        try {
            // Validaciones iniciales
            if (!authId) {
                console.error('‚ùå [AUTH-ID] Error: authId es requerido');
                throw new Error('authId es requerido');
            }
            
            if (!nombreActual || nombreActual.trim() === '') {
                console.error('‚ùå [AUTH-ID] Error: nombreActual es requerido');
                throw new Error('nombreActual es requerido');
            }

            console.log(`üîÑ [AUTH-ID] Iniciando guardado para: ${nombreActual} (Auth: ${authId})`);
            
            // Registrar historial de nombres
            await dbFunctions.registrarNombreJugador(authId, nombreActual);
            
            // Valores por defecto robustos
            const statsSeguras = {
                partidos: stats?.partidos ?? 0,
                victorias: stats?.victorias ?? 0,
                derrotas: stats?.derrotas ?? 0,
                goles: stats?.goles ?? 0,
                asistencias: stats?.asistencias ?? 0,
                autogoles: stats?.autogoles ?? 0,
                mejorRachaGoles: stats?.mejorRachaGoles ?? 0,
                mejorRachaAsistencias: stats?.mejorRachaAsistencias ?? 0,
                hatTricks: stats?.hatTricks ?? 0,
                vallasInvictas: stats?.vallasInvictas ?? 0,
                tiempoJugado: stats?.tiempoJugado ?? 0,
                promedioGoles: stats?.promedioGoles ?? 0.0,
                promedioAsistencias: stats?.promedioAsistencias ?? 0.0,
                fechaPrimerPartido: stats?.fechaPrimerPartido ?? new Date(),
                fechaUltimoPartido: stats?.fechaUltimoPartido ?? new Date(),
                xp: stats?.xp ?? 40,
                nivel: stats?.nivel ?? 1,
                codigoRecuperacion: stats?.codigoRecuperacion ?? null,
                fechaCodigoCreado: stats?.fechaCodigoCreado ?? null,
                mvps: stats?.mvps ?? 0
            };

            console.log(`üìä [AUTH-ID] Stats preparadas para ${nombreActual}`);
            
            // ESTRATEGIA CORREGIDA: Primero verificar si existe y luego decidir INSERT o UPDATE
            const jugadorExistente = await dbFunctions.obtenerJugadorPorAuth(authId);
            
            let result;
            if (jugadorExistente) {
                console.log(`üîÑ [AUTH-ID] Jugador existente encontrado (ID: ${jugadorExistente.id}), actualizando...`);
                
                // UPDATE: Actualizar registro existente (solo nombre y timestamps, mantener stats)
                const updateQuery = `UPDATE jugadores 
                                    SET auth_id = ?, nombre = ?, nombre_display = ?, updated_at = CURRENT_TIMESTAMP
                                    WHERE nombre = ?`;
                
                result = await executeQuery(updateQuery, [nombreActual, nombreActual, authId]);
                result.insertId = jugadorExistente.id; // Para mantener compatibilidad
                
                console.log(`‚úÖ [AUTH-ID] Jugador actualizado: ${nombreActual} (ID: ${jugadorExistente.id})`);
            } else {
                console.log(`üÜï [AUTH-ID] Nuevo jugador, insertando...`);
                
                // INSERT: Crear nuevo registro completo
                const insertQuery = `INSERT INTO jugadores 
                                    (auth_id, nombre, nombre_display, partidos, victorias, derrotas, goles, asistencias, autogoles, 
                                     mejorRachaGoles, mejorRachaAsistencias, hatTricks, vallasInvictas, 
                                     tiempoJugado, promedioGoles, promedioAsistencias, fechaPrimerPartido, 
                                     fechaUltimoPartido, xp, nivel, codigoRecuperacion, fechaCodigoCreado, mvps, updated_at)
                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)`;
                
                const parametros = [
                    authId, nombreActual, nombreActual, 
                    statsSeguras.partidos, statsSeguras.victorias, statsSeguras.derrotas, statsSeguras.goles, 
                    statsSeguras.asistencias, statsSeguras.autogoles, statsSeguras.mejorRachaGoles, statsSeguras.mejorRachaAsistencias, 
                    statsSeguras.hatTricks, statsSeguras.vallasInvictas, statsSeguras.tiempoJugado, statsSeguras.promedioGoles, 
                    statsSeguras.promedioAsistencias, statsSeguras.fechaPrimerPartido, statsSeguras.fechaUltimoPartido, 
                    statsSeguras.xp, statsSeguras.nivel, statsSeguras.codigoRecuperacion, statsSeguras.fechaCodigoCreado,
                    statsSeguras.mvps
                ];
                
                result = await executeQuery(insertQuery, parametros);
                console.log(`‚úÖ [AUTH-ID] Nuevo jugador insertado: ${nombreActual} (ID: ${result.insertId})`);
            }
            
            console.log(`üìù [AUTH-ID] Resultado de operaci√≥n:`, result);
            
            // Verificaci√≥n final
            const jugadorFinal = await dbFunctions.obtenerJugadorPorAuth(authId);
            if (!jugadorFinal) {
                console.error(`‚ùå [AUTH-ID] FALLO CR√çTICO: Jugador no encontrado despu√©s de la operaci√≥n para authId: ${authId}`);
                throw new Error('El jugador no se guard√≥ correctamente en la base de datos');
            }
            
            console.log(`‚úÖ [AUTH-ID] Operaci√≥n exitosa para: ${nombreActual} (Auth: ${authId})`);
            console.log(`üéØ [AUTH-ID] Datos finales:`, {
                id: jugadorFinal.id,
                nombre: jugadorFinal.nombre,
                auth_id: jugadorFinal.auth_id,
                goles: jugadorFinal.goles,
                partidos: jugadorFinal.partidos
            });
            
            return result.insertId || result.affectedRows;
            
        } catch (error) {
            // Manejar errores de constraint UNIQUE para nombres duplicados
            if (error.code === 'ER_DUP_ENTRY' && error.sqlMessage && error.sqlMessage.includes('nombre')) {
                console.log(`‚ö†Ô∏è [AUTH-ID] Nombre duplicado detectado, pero authId es √∫nico. Intentando actualizar por auth_id...`);
                
                try {
                    // Actualizar solo el jugador con este auth_id
                    const updateQuery = `UPDATE jugadores 
                                        SET auth_id = ?, nombre = ?, nombre_display = ?, updated_at = CURRENT_TIMESTAMP
                                        WHERE nombre = ?`;
                    
                    const result = await executeQuery(updateQuery, [authId, nombreActual, nombreActual, nombreActual]);
                    console.log(`‚úÖ [AUTH-ID] Actualizaci√≥n exitosa despu√©s de error de nombre duplicado`);
                    return result.affectedRows;
                    
                } catch (updateError) {
                    console.error(`‚ùå [AUTH-ID] Error en actualizaci√≥n de respaldo:`, updateError);
                    throw updateError;
                }
            }
            
            console.error(`‚ùå [AUTH-ID] Error guardando jugador por auth_id (${authId}):`, error);
            throw error;
        }
    },
    
    // Obtener jugador por auth_id
    obtenerJugadorPorAuth: async (authId) => {
        const query = 'SELECT * FROM jugadores WHERE nombre = ?';
        try {
            const results = await executeQuery(query, [authId]);
            return results[0] || null;
        } catch (error) {
            console.error('‚ùå Error obteniendo jugador por auth_id:', error);
            throw error;
        }
    },
    
    // Buscar jugador SOLO por auth_id (sin fallback por nombre)
    buscarJugador: async (busqueda, tipoPreferido = 'auth') => {
        try {
            if (!busqueda) return null;
            const jugador = await dbFunctions.obtenerJugadorPorAuth(busqueda);
            if (jugador) {
                console.log(`üîç [AUTH-ID] Jugador encontrado por auth: ${jugador.nombre_display || jugador.nombre}`);
                return jugador;
            }
            console.log(`‚ùå [AUTH-ID] Jugador no encontrado por auth: ${busqueda}`);
            return null;
        } catch (error) {
            console.error('‚ùå Error buscando jugador por auth:', error);
            return null;
        }
    },
    
    // Registrar historial de nombres de un jugador
    registrarNombreJugador: async (authId, nombreUsado) => {
        try {
            const ahora = new Date();
            const query = `INSERT INTO jugador_nombres_historial 
                          (auth_id, nombre, primera_vez_usado, ultima_vez_usado, veces_usado)
                          VALUES (?, ?, ?, ?, 1)
                          ON DUPLICATE KEY UPDATE
                          ultima_vez_usado = VALUES(ultima_vez_usado),
                          veces_usado = veces_usado + 1`;
            
            await executeQuery(query, [authId, nombreUsado, ahora, ahora]);
            console.log(`üìù [AUTH-ID] Nombre registrado: ${nombreUsado} -> ${authId}`);
        } catch (error) {
            console.error('‚ùå Error registrando nombre del jugador:', error);
        }
    },
    
    // Obtener historial de nombres de un jugador
    obtenerHistorialNombres: async (authId) => {
        try {
            const query = `SELECT nombre, primera_vez_usado, ultima_vez_usado, veces_usado 
                          FROM jugador_nombres_historial 
                          WHERE nombre = ? 
                          ORDER BY ultima_vez_usado DESC`;
            
            const results = await executeQuery(query, [authId]);
            return results;
        } catch (error) {
            console.error('‚ùå Error obteniendo historial de nombres:', error);
            return [];
        }
    },
    
    // Migrar estad√≠sticas de nombre a auth_id
    migrarJugadorAAuth: async (nombreAnterior, authId) => {
        try {
            console.log(`üîÑ [MIGRACI√ìN] Iniciando migraci√≥n: ${nombreAnterior} -> ${authId}`);
            
            // Verificar si ya existe un jugador con este auth_id
            const jugadorExistente = await dbFunctions.obtenerJugadorPorAuth(authId);
            if (jugadorExistente) {
                console.log(`‚ö†Ô∏è [MIGRACI√ìN] Ya existe jugador con auth_id ${authId}: ${jugadorExistente.nombre}`);
                
                // Solo registrar el nombre en el historial
                await dbFunctions.registrarNombreJugador(authId, nombreAnterior);
                return { migrado: false, razon: 'jugador_ya_existe', jugadorExistente };
            }
            
            // Buscar jugador por nombre antiguo
            const jugadorAntiguo = await dbFunctions.obtenerJugador(nombreAnterior);
            if (!jugadorAntiguo) {
                console.log(`‚ùå [MIGRACI√ìN] No se encontr√≥ jugador con nombre ${nombreAnterior}`);
                return { migrado: false, razon: 'jugador_no_encontrado' };
            }
            
            // Actualizar el jugador con el auth_id
            const query = `UPDATE jugadores 
                          SET auth_id = ?, nombre_display = nombre
                          WHERE nombre = ?`;
            
            const result = await executeQuery(query, [authId, nombreAnterior]);
            
            if (result.affectedRows > 0) {
                // Registrar en el historial de nombres
                await dbFunctions.registrarNombreJugador(authId, nombreAnterior);
                
                console.log(`‚úÖ [MIGRACI√ìN] Completada: ${nombreAnterior} -> ${authId}`);
                return { 
                    migrado: true, 
                    jugadorMigrado: {
                        nombre: nombreAnterior,
                        authId: authId,
                        stats: jugadorAntiguo
                    }
                };
            } else {
                console.error(`‚ùå [MIGRACI√ìN] Error al actualizar jugador ${nombreAnterior}`);
                return { migrado: false, razon: 'error_actualizacion' };
            }
        } catch (error) {
            console.error('‚ùå Error en migraci√≥n a auth_id:', error);
            return { migrado: false, razon: 'error_sistema', error: error.message };
        }
    },
    
    // ====================== FUNCIONES PARA TRACKING DE SALIDAS ======================
    
    // Registrar salida de jugador
    registrarSalidaJugador: async (nombre, authId, playerId, razon = 'Voluntaria') => {
        try {
            const query = `INSERT INTO salidas_jugadores 
                          (nombre, auth_id, player_id, razon_salida)
                          VALUES (?, ?, ?, ?)`;
            
            const result = await executeQuery(query, [nombre, authId, playerId, razon]);
            console.log(`üìù Salida registrada: ${nombre} (ID: ${playerId})`);
            return result.insertId;
        } catch (error) {
            console.error('‚ùå Error registrando salida de jugador:', error);
            throw error;
        }
    },
    
    // Obtener √∫ltimas salidas con paginaci√≥n
    obtenerUltimasSalidas: async (pagina = 1, porPagina = 10) => {
        try {
            // Asegurar que los par√°metros sean n√∫meros enteros
            const paginaInt = parseInt(pagina) || 1;
            const porPaginaInt = parseInt(porPagina) || 10;
            const offset = (paginaInt - 1) * porPaginaInt;
            
            console.log(`üîç DEBUG: obtenerUltimasSalidas - p√°gina: ${paginaInt}, porPagina: ${porPaginaInt}, offset: ${offset}`);
            
            // Obtener el total de registros para paginaci√≥n
            const countQuery = `SELECT COUNT(*) as total FROM salidas_jugadores`;
            const countResult = await executeQuery(countQuery, []);
            const total = countResult[0].total;
            
            console.log(`üîç DEBUG: Total de registros encontrados: ${total}`);
            
            // Obtener los registros de la p√°gina actual
            // Usar LIMIT con n√∫meros enteros directamente en lugar de par√°metros preparados
            const query = `SELECT nombre, player_id, fecha_salida, razon_salida 
                          FROM salidas_jugadores 
                          ORDER BY fecha_salida DESC 
                          LIMIT ${porPaginaInt} OFFSET ${offset}`;
            
            console.log(`üîç DEBUG: Ejecutando query: ${query}`);
            
            const results = await executeQuery(query, []);
            
            console.log(`üîç DEBUG: Resultados obtenidos: ${results.length} registros`);
            
            return {
                success: true,
                data: results,
                total: total,
                pagina: paginaInt,
                porPagina: porPaginaInt
            };
        } catch (error) {
            console.error('‚ùå Error obteniendo √∫ltimas salidas:', error);
            console.error('‚ùå Stack trace:', error.stack);
            return {
                success: false,
                error: error.message,
                data: [],
                total: 0,
                pagina: parseInt(pagina) || 1,
                porPagina: parseInt(porPagina) || 10
            };
        }
    }
};

module.exports = dbFunctions;
