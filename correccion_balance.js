/**
 * CORRECCI√ìN DEL SISTEMA DE BALANCE AUTOM√ÅTICO
 * Este archivo contiene las correcciones necesarias para que el balance funcione correctamente
 */

console.log('üîß CARGANDO CORRECCIONES PARA EL SISTEMA DE BALANCE AUTOM√ÅTICO');

// Funci√≥n corregida de balance autom√°tico continuo
function balanceAutomaticoContinuoCorregido() {
    console.log(`üîÑ DEBUG balanceAutomaticoContinuoCorregido: Iniciando...`);
    
    if (typeof room === 'undefined' || !room || !room.getPlayerList) {
        console.log(`‚ùå DEBUG balanceAutomaticoContinuoCorregido: Room no disponible`);
        return false;
    }
    
    const equipos = obtenerCantidadJugadoresPorEquipo();
    const { rojo, azul, diferencia, jugadoresRojo, jugadoresAzul } = equipos;
    
    console.log(`üîÑ DEBUG balanceAutomaticoContinuoCorregido: Rojo=${rojo}, Azul=${azul}, Diferencia=${diferencia}`);
    
    // Si no hay jugadores en equipos, no hacer nada
    if (rojo === 0 && azul === 0) {
        console.log(`‚ùå DEBUG: No hay jugadores en equipos para balancear`);
        return false;
    }
    
    // CONDICI√ìN PRINCIPAL: Balancear cuando la diferencia sea mayor a 1 jugador
    if (diferencia <= 1) {
        console.log(`‚úÖ DEBUG: Equipos YA balanceados (diferencia ${diferencia} ‚â§ 1)`);
        return false;
    }
    
    console.log(`‚öñÔ∏è DEBUG: Balance NECESARIO - diferencia de ${diferencia} jugadores`);
    
    // Determinar equipo con m√°s jugadores y equipo con menos jugadores
    const equipoConMas = rojo > azul ? jugadoresRojo : jugadoresAzul;
    const equipoConMenos = rojo > azul ? 2 : 1; // 1=rojo, 2=azul
    const equipoConMasNombre = rojo > azul ? 'ROJO' : 'AZUL';
    const equipoConMenosNombre = rojo > azul ? 'AZUL' : 'ROJO';
    
    console.log(`üîç DEBUG: Equipo mayor: ${equipoConMasNombre} (${equipoConMas.length}), Equipo menor: ${equipoConMenosNombre}`);
    
    // CORRECCI√ìN 1: Verificar que esBot est√° definida globalmente
    let funcionEsBot;
    if (typeof esBot === 'function') {
        funcionEsBot = esBot;
    } else if (typeof window !== 'undefined' && typeof window.esBot === 'function') {
        funcionEsBot = window.esBot;
    } else if (typeof global !== 'undefined' && typeof global.esBot === 'function') {
        funcionEsBot = global.esBot;
    } else {
        // Funci√≥n de respaldo para detectar bots
        funcionEsBot = function(jugador) {
            return jugador && jugador.name && (
                jugador.name.includes('[BOT]') ||
                jugador.name.includes('Bot') ||
                jugador.name.includes('bot') ||
                jugador.name === '' ||
                jugador.id === 0
            );
        };
        console.log(`‚ö†Ô∏è DEBUG: Usando funci√≥n de respaldo para detectar bots`);
    }
    
    // CORRECCI√ìN 2: Filtrar candidatos v√°lidos con verificaciones mejoradas
    const candidatos = equipoConMas.filter(jugador => {
        // Verificar que el jugador existe y tiene las propiedades necesarias
        if (!jugador || typeof jugador.id === 'undefined') {
            console.log(`üö´ DEBUG: Jugador inv√°lido detectado`);
            return false;
        }
        
        // Verificar si es bot
        if (funcionEsBot(jugador)) {
            console.log(`üö´ DEBUG: Excluyendo bot ${jugador.name} del balance`);
            return false;
        }
        
        // Verificar si est√° AFK
        if (typeof jugadoresAFK !== 'undefined' && jugadoresAFK && jugadoresAFK.has(jugador.id)) {
            console.log(`üö´ DEBUG: Excluyendo ${jugador.name} del balance (marcado como AFK)`);
            return false;
        }
        
        // Verificar que el jugador a√∫n est√© en el equipo correcto
        const jugadorActual = room.getPlayerList().find(j => j.id === jugador.id);
        if (!jugadorActual || jugadorActual.team === 0) {
            console.log(`üö´ DEBUG: ${jugador.name} ya no est√° en equipo, excluyendo`);
            return false;
        }
        
        console.log(`‚úÖ DEBUG: ${jugador.name} es candidato v√°lido para balance`);
        return true;
    });
    
    console.log(`üéØ DEBUG: Candidatos v√°lidos: ${candidatos.length}/${equipoConMas.length}`);
    
    // CORRECCI√ìN 3: Verificar que hay candidatos antes de continuar
    if (candidatos.length === 0) {
        console.log(`‚ö†Ô∏è DEBUG: NO HAY candidatos v√°lidos para balance autom√°tico continuo`);
        console.log(`üìä DEBUG: Razones de exclusi√≥n verificadas: BOT, AFK, ya movidos`);
        
        // Mostrar informaci√≥n detallada para debug
        equipoConMas.forEach(jugador => {
            const esBot = funcionEsBot(jugador);
            const esAFK = jugadoresAFK && jugadoresAFK.has(jugador.id);
            const jugadorActual = room.getPlayerList().find(j => j.id === jugador.id);
            const enEquipo = jugadorActual && jugadorActual.team !== 0;
            
            console.log(`   ${jugador.name}: Bot=${esBot}, AFK=${esAFK}, EnEquipo=${enEquipo}`);
        });
        
        return false;
    }
    
    // CORRECCI√ìN 4: Calcular mejor el n√∫mero de jugadores a mover
    let jugadoresAMover = Math.floor(diferencia / 2);
    
    // Asegurar que movemos al menos 1 jugador si hay diferencia > 1
    if (diferencia > 1 && jugadoresAMover === 0) {
        jugadoresAMover = 1;
    }
    
    // Limitar por candidatos disponibles
    jugadoresAMover = Math.min(jugadoresAMover, candidatos.length);
    
    console.log(`‚öñÔ∏è DEBUG: Moviendo ${jugadoresAMover} jugador(es) del equipo ${equipoConMasNombre} al ${equipoConMenosNombre}`);
    
    // CORRECCI√ìN 5: Anunciar el balance ANTES de mover jugadores
    anunciarGeneral(`‚öñÔ∏è üîÑ Equilibrando equipos por desconexi√≥n (${jugadoresAMover} jugador${jugadoresAMover > 1 ? 'es' : ''})...`, \"87CEEB\", \"bold\");
    
    // CORRECCI√ìN 6: Mezclar candidatos y mover uno por uno con verificaciones
    const candidatosAleatorios = [...candidatos].sort(() => 0.5 - Math.random());
    let jugadoresMovidos = 0;
    
    for (let i = 0; i < jugadoresAMover && i < candidatosAleatorios.length; i++) {
        const jugadorSeleccionado = candidatosAleatorios[i];
        
        try {
            // Verificar una vez m√°s que el jugador est√° disponible
            const jugadorActual = room.getPlayerList().find(j => j.id === jugadorSeleccionado.id);
            if (!jugadorActual || jugadorActual.team === 0) {
                console.log(`‚ö†Ô∏è DEBUG: ${jugadorSeleccionado.name} ya no est√° disponible para mover`);
                continue;
            }
            
            console.log(`üé≤ DEBUG: Moviendo ${jugadorSeleccionado.name} (${i+1}/${jugadoresAMover})`);
            
            // CORRECCI√ìN 7: Marcar movimiento como iniciado por el bot ANTES de mover
            if (typeof movimientoIniciadorPorBot !== 'undefined' && movimientoIniciadorPorBot) {
                movimientoIniciadorPorBot.add(jugadorSeleccionado.id);
                console.log(`ü§ñ DEBUG: Marcado movimiento iniciado por bot para ${jugadorSeleccionado.name}`);
            }
            
            // CORRECCI√ìN 8: Ejecutar el movimiento con verificaci√≥n de √©xito
            const equipoAnterior = jugadorActual.team;
            room.setPlayerTeam(jugadorSeleccionado.id, equipoConMenos);
            
            // Verificar que el movimiento fue exitoso despu√©s de un peque√±o delay
            setTimeout(() => {
                const jugadorDespues = room.getPlayerList().find(j => j.id === jugadorSeleccionado.id);
                if (jugadorDespues && jugadorDespues.team === equipoConMenos) {
                    console.log(`‚úÖ DEBUG: ${jugadorSeleccionado.name} movido exitosamente de equipo ${equipoAnterior} al ${equipoConMenos}`);
                    
                    // Anunciar el movimiento individual
                    const equipoDestinoEmoji = equipoConMenos === 1 ? 'üî¥' : 'üîµ';
                    anunciarGeneral(`‚öñÔ∏è ${jugadorSeleccionado.name} ‚Üí ${equipoDestinoEmoji} ${equipoConMenosNombre}`, \"90EE90\", \"normal\");
                } else {
                    console.log(`‚ùå DEBUG: FALLO al mover ${jugadorSeleccionado.name} - equipo actual: ${jugadorDespues ? jugadorDespues.team : 'desconectado'}`);
                }
            }, 100);
            
            jugadoresMovidos++;
            
        } catch (error) {
            console.log(`‚ùå ERROR moviendo ${jugadorSeleccionado.name}: ${error.message}`);
        }
    }
    
    console.log(`üèÅ DEBUG: Proceso completado - ${jugadoresMovidos} jugadores movidos`);
    
    // CORRECCI√ìN 9: Verificar resultado despu√©s de un delay apropiado
    setTimeout(() => {
        const equiposPostBalance = obtenerCantidadJugadoresPorEquipo();
        console.log(`üìä DEBUG Post-balance: Rojo=${equiposPostBalance.rojo}, Azul=${equiposPostBalance.azul}, Diferencia=${equiposPostBalance.diferencia}`);
        
        if (equiposPostBalance.diferencia <= 1) {
            console.log(`‚úÖ DEBUG: Balance COMPLETADO exitosamente`);
            anunciarGeneral(`‚úÖ Equipos equilibrados correctamente`, \"90EE90\", \"normal\");
        } else if (equiposPostBalance.diferencia > 1 && equiposPostBalance.rojo > 0 && equiposPostBalance.azul > 0) {
            console.log(`üîÑ DEBUG: A√∫n hay diferencia (${equiposPostBalance.diferencia}), intentando balance adicional...`);
            setTimeout(() => {
                balanceAutomaticoContinuoCorregido();
            }, 2000);
        }
    }, 1000);
    
    return jugadoresMovidos > 0;
}

// Funci√≥n corregida de balance post-salida
function balanceInteligentePostSalidaCorregido(nombreJugadorSalido = \"jugador\") {
    console.log(`‚öñÔ∏è DEBUG balancePostSalidaCorregido: Jugador salido = ${nombreJugadorSalido}`);
    
    if (typeof room === 'undefined' || !room || !room.getPlayerList) {
        console.warn('‚ö†Ô∏è Room no disponible para balancePostSalida');
        return false;
    }
    
    const equipos = obtenerCantidadJugadoresPorEquipo();
    const { rojo, azul, diferencia, jugadoresRojo, jugadoresAzul } = equipos;
    
    console.log(`‚öñÔ∏è DEBUG: Post-salida de ${nombreJugadorSalido} - Equipos: Rojo=${rojo}, Azul=${azul}, Diferencia=${diferencia}`);
    
    // Si no hay diferencia significativa (‚â§1), no hacer balance
    if (diferencia <= 1) {
        console.log(`‚úÖ DEBUG: Equipos equilibrados post-salida (diferencia ‚â§ 1)`);
        return false;
    }
    
    // Si hay muy pocos jugadores, no hacer balance
    if ((rojo + azul) <= 2) {
        console.log(`‚úÖ DEBUG: Muy pocos jugadores totales (${rojo + azul})`);
        return false;
    }
    
    // USAR LA FUNCI√ìN CORREGIDA
    return balanceAutomaticoContinuoCorregido();
}

// CORRECCI√ìN 10: Reemplazar las funciones originales de forma segura
function aplicarCorreccionesBalance() {
    console.log('üîß Aplicando correcciones al sistema de balance...');
    
    try {
        // Guardar referencias originales
        if (typeof balanceAutomaticoContinuo !== 'undefined') {
            window.balanceAutomaticoContinuoOriginal = balanceAutomaticoContinuo;
        }
        if (typeof balanceInteligentePostSalida !== 'undefined') {
            window.balanceInteligentePostSalidaOriginal = balanceInteligentePostSalida;
        }
        
        // Reemplazar con versiones corregidas
        if (typeof window !== 'undefined') {
            window.balanceAutomaticoContinuo = balanceAutomaticoContinuoCorregido;
            window.balanceInteligentePostSalida = balanceInteligentePostSalidaCorregido;
        }
        if (typeof global !== 'undefined') {
            global.balanceAutomaticoContinuo = balanceAutomaticoContinuoCorregido;
            global.balanceInteligentePostSalida = balanceInteligentePostSalidaCorregido;
        }
        
        // Hacer las funciones accesibles globalmente
        balanceAutomaticoContinuo = balanceAutomaticoContinuoCorregido;
        balanceInteligentePostSalida = balanceInteligentePostSalidaCorregido;
        
        console.log('‚úÖ Correcciones aplicadas exitosamente');
        console.log('üìã Funciones corregidas:');
        console.log('   ‚úì balanceAutomaticoContinuo (versi√≥n corregida)');
        console.log('   ‚úì balanceInteligentePostSalida (versi√≥n corregida)');
        
    } catch (error) {
        console.error('‚ùå Error aplicando correcciones:', error);
    }
}

// Funci√≥n de test para verificar el balance
function testBalanceCorregido() {
    console.log('\nüß™ EJECUTANDO TEST DEL BALANCE CORREGIDO...');
    
    try {
        if (typeof room === 'undefined' || !room) {
            console.log('‚ùå No se puede ejecutar test - room no disponible');
            return;
        }
        
        const jugadores = room.getPlayerList();
        console.log(`üë• Jugadores actuales: ${jugadores.length}`);
        
        const equipos = obtenerCantidadJugadoresPorEquipo();
        console.log(`üìä Estado actual: Rojo=${equipos.rojo}, Azul=${equipos.azul}, Diferencia=${equipos.diferencia}`);
        
        if (equipos.diferencia > 1) {
            console.log('üéØ Ejecutando balance corregido...');
            const resultado = balanceAutomaticoContinuoCorregido();
            console.log(`üìã Resultado del balance: ${resultado ? 'EXITOSO' : 'NO NECESARIO'}`);
        } else {
            console.log('‚úÖ No es necesario balance - equipos ya equilibrados');
        }
        
    } catch (error) {
        console.error('‚ùå Error en test de balance:', error);
    }
}

// Exportar funciones
if (typeof window !== 'undefined') {
    window.balanceAutomaticoContinuoCorregido = balanceAutomaticoContinuoCorregido;
    window.balanceInteligentePostSalidaCorregido = balanceInteligentePostSalidaCorregido;
    window.aplicarCorreccionesBalance = aplicarCorreccionesBalance;
    window.testBalanceCorregido = testBalanceCorregido;
    
    console.log('‚úÖ Funciones de correcci√≥n disponibles:');
    console.log('   - aplicarCorreccionesBalance() - Aplica las correcciones');
    console.log('   - testBalanceCorregido() - Prueba el balance corregido');
    console.log('   - balanceAutomaticoContinuoCorregido() - Versi√≥n corregida del balance');
} else {
    module.exports = {
        balanceAutomaticoContinuoCorregido,
        balanceInteligentePostSalidaCorregido,
        aplicarCorreccionesBalance,
        testBalanceCorregido
    };
}

console.log('üîß Correcciones cargadas. Ejecuta aplicarCorreccionesBalance() para aplicarlas.');
