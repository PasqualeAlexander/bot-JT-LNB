// ========================================
// TEST CASE: PROBLEMA BALANCE 4v2 - NO ENCUENTRA CANDIDATOS
// ========================================

console.log('üîß INICIANDO TEST: Problema balance 4v2 - candidatos v√°lidos');

// ========== MOCK DE ROOM Y FUNCIONES NECESARIAS ==========
let jugadoresAFK = new Map();
let movimientoIniciadorPorBot = new Set();

// Funci√≥n esBot original (problem√°tica)
function esBotOriginal(jugador) {
    if (!jugador) return false;
    return jugador.name === "HOST LNB" || jugador.id === 0;
}

// Funci√≥n esBot mejorada (como respaldo en el c√≥digo actual)
function esBotMejorado(jugador) {
    return jugador && jugador.name && (
        jugador.name.includes('[BOT]') ||
        jugador.name.includes('Bot') ||
        jugador.name.includes('bot') ||
        jugador.name === '' ||
        jugador.id === 0
    );
}

// Mock de room con escenario problem√°tico
const room = {
    getPlayerList: () => [
        // Equipo ROJO (4 jugadores) - tiene m√°s jugadores
        { id: 1, name: "Jugador1", team: 1 },
        { id: 2, name: "Jugador2", team: 1 },
        { id: 3, name: "Jugador3", team: 1 },
        { id: 4, name: "Jugador4", team: 1 },
        // Equipo AZUL (2 jugadores) - tiene menos jugadores
        { id: 5, name: "Jugador5", team: 2 },
        { id: 6, name: "Jugador6", team: 2 }
    ],
    setPlayerTeam: (id, team) => {
        console.log(`üéØ SIMULANDO: room.setPlayerTeam(${id}, ${team})`);
        // Simular que el movimiento fue exitoso
        const jugadores = room.getPlayerList();
        const jugador = jugadores.find(j => j.id === id);
        if (jugador) {
            jugador.team = team;
            console.log(`‚úÖ Jugador ${jugador.name} movido al equipo ${team}`);
        }
    }
};

// Funci√≥n para obtener cantidad de jugadores por equipo (copiada del c√≥digo original)
function obtenerCantidadJugadoresPorEquipo() {
    const jugadores = room.getPlayerList();
    const jugadoresRojo = jugadores.filter(j => j.team === 1);
    const jugadoresAzul = jugadores.filter(j => j.team === 2);
    
    return {
        rojo: jugadoresRojo.length,
        azul: jugadoresAzul.length,
        diferencia: Math.abs(jugadoresRojo.length - jugadoresAzul.length),
        jugadoresRojo: jugadoresRojo,
        jugadoresAzul: jugadoresAzul
    };
}

// Funci√≥n de anuncio mock
function anunciarGeneral(mensaje, color, estilo) {
    console.log(`üì¢ ANUNCIO: ${mensaje} [${color}, ${estilo}]`);
}

// ========== TEST SCENARIOS ==========

console.log('\\n==================== ESCENARIO 1: FUNCI√ìN ESBOT ORIGINAL ====================');

function testBalanceConEsBotOriginal() {
    console.log('\\nüîç TESTING: Usando funci√≥n esBot ORIGINAL (restrictiva)');
    
    const equipos = obtenerCantidadJugadoresPorEquipo();
    console.log(`üìä Estado inicial: Rojo=${equipos.rojo}, Azul=${equipos.azul}, Diferencia=${equipos.diferencia}`);
    
    // Determinar equipo con m√°s jugadores
    const equipoConMas = equipos.rojo > equipos.azul ? equipos.jugadoresRojo : equipos.jugadoresAzul;
    const equipoConMasNombre = equipos.rojo > equipos.azul ? 'ROJO' : 'AZUL';
    
    console.log(`\\nüéØ Equipo con m√°s jugadores: ${equipoConMasNombre} (${equipoConMas.length} jugadores)`);
    equipoConMas.forEach(j => console.log(`  - ${j.name} (ID: ${j.id})`));
    
    // Filtrar candidatos usando funci√≥n ORIGINAL
    console.log('\\nüîç Filtrando candidatos con funci√≥n esBot ORIGINAL...');
    
    const candidatos = equipoConMas.filter(jugador => {
        console.log(`\\n  Evaluando: ${jugador.name} (ID: ${jugador.id})`);
        
        // Verificar que el jugador existe
        if (!jugador || typeof jugador.id === 'undefined') {
            console.log(`    ‚ùå Jugador inv√°lido`);
            return false;
        }
        
        // Verificar si es bot (usando funci√≥n ORIGINAL)
        if (esBotOriginal(jugador)) {
            console.log(`    ‚ùå Es bot (funci√≥n original)`);
            return false;
        }
        
        // Verificar si est√° AFK
        if (jugadoresAFK.has(jugador.id)) {
            console.log(`    ‚ùå Est√° marcado como AFK`);
            return false;
        }
        
        // Verificar que a√∫n est√© en equipo
        const jugadorActual = room.getPlayerList().find(j => j.id === jugador.id);
        if (!jugadorActual || jugadorActual.team === 0) {
            console.log(`    ‚ùå Ya no est√° en equipo`);
            return false;
        }
        
        console.log(`    ‚úÖ Candidato V√ÅLIDO`);
        return true;
    });
    
    console.log(`\\nüìä RESULTADO: ${candidatos.length}/${equipoConMas.length} candidatos v√°lidos`);
    candidatos.forEach(c => console.log(`  ‚úÖ ${c.name}`));
    
    if (candidatos.length === 0) {
        console.log(`\\n‚ö†Ô∏è PROBLEMA DETECTADO: No hay candidatos v√°lidos con funci√≥n esBot original`);
        anunciarGeneral('‚öñÔ∏è ‚ùå No se puede equilibrar: jugadores no disponibles para balance', "FFA500", "normal");
        return false;
    }
    
    return true;
}

console.log('\\n==================== ESCENARIO 2: FUNCI√ìN ESBOT MEJORADA ====================');

function testBalanceConEsBotMejorado() {
    console.log('\\nüîç TESTING: Usando funci√≥n esBot MEJORADA (m√°s flexible)');
    
    const equipos = obtenerCantidadJugadoresPorEquipo();
    const equipoConMas = equipos.rojo > equipos.azul ? equipos.jugadoresRojo : equipos.jugadoresAzul;
    const equipoConMasNombre = equipos.rojo > equipos.azul ? 'ROJO' : 'AZUL';
    
    console.log(`\\nüéØ Equipo con m√°s jugadores: ${equipoConMasNombre} (${equipoConMas.length} jugadores)`);
    
    // Filtrar candidatos usando funci√≥n MEJORADA
    console.log('\\nüîç Filtrando candidatos con funci√≥n esBot MEJORADA...');
    
    const candidatos = equipoConMas.filter(jugador => {
        console.log(`\\n  Evaluando: ${jugador.name} (ID: ${jugador.id})`);
        
        if (!jugador || typeof jugador.id === 'undefined') {
            console.log(`    ‚ùå Jugador inv√°lido`);
            return false;
        }
        
        // Verificar si es bot (usando funci√≥n MEJORADA)
        if (esBotMejorado(jugador)) {
            console.log(`    ‚ùå Es bot (funci√≥n mejorada)`);
            return false;
        }
        
        if (jugadoresAFK.has(jugador.id)) {
            console.log(`    ‚ùå Est√° marcado como AFK`);
            return false;
        }
        
        const jugadorActual = room.getPlayerList().find(j => j.id === jugador.id);
        if (!jugadorActual || jugadorActual.team === 0) {
            console.log(`    ‚ùå Ya no est√° en equipo`);
            return false;
        }
        
        console.log(`    ‚úÖ Candidato V√ÅLIDO`);
        return true;
    });
    
    console.log(`\\nüìä RESULTADO: ${candidatos.length}/${equipoConMas.length} candidatos v√°lidos`);
    candidatos.forEach(c => console.log(`  ‚úÖ ${c.name}`));
    
    if (candidatos.length === 0) {
        console.log(`\\n‚ö†Ô∏è PROBLEMA DETECTADO: No hay candidatos v√°lidos con funci√≥n esBot mejorada`);
        anunciarGeneral('‚öñÔ∏è ‚ùå No se puede equilibrar: jugadores no disponibles para balance', "FFA500", "normal");
        return false;
    }
    
    return true;
}

console.log('\\n==================== ESCENARIO 3: JUGADORES AFK MARCADOS ====================');

function testBalanceConJugadoresAFK() {
    console.log('\\nüîç TESTING: Escenario con algunos jugadores marcados como AFK');
    
    // Marcar algunos jugadores como AFK
    jugadoresAFK.set(1, { ultimaActividad: Date.now() - 20000 }); // Jugador1 AFK
    jugadoresAFK.set(2, { ultimaActividad: Date.now() - 20000 }); // Jugador2 AFK
    
    console.log(`\\nüí§ Jugadores marcados como AFK:`);
    for (const [playerId, data] of jugadoresAFK.entries()) {
        const jugador = room.getPlayerList().find(j => j.id === playerId);
        console.log(`  üí§ ${jugador ? jugador.name : 'ID:' + playerId}`);
    }
    
    const equipos = obtenerCantidadJugadoresPorEquipo();
    const equipoConMas = equipos.rojo > equipos.azul ? equipos.jugadoresRojo : equipos.jugadoresAzul;
    
    // Filtrar candidatos
    console.log('\\nüîç Filtrando candidatos considerando jugadores AFK...');
    
    const candidatos = equipoConMas.filter(jugador => {
        console.log(`\\n  Evaluando: ${jugador.name} (ID: ${jugador.id})`);
        
        if (!jugador || typeof jugador.id === 'undefined') {
            console.log(`    ‚ùå Jugador inv√°lido`);
            return false;
        }
        
        if (esBotMejorado(jugador)) {
            console.log(`    ‚ùå Es bot`);
            return false;
        }
        
        if (jugadoresAFK.has(jugador.id)) {
            console.log(`    ‚ùå Est√° marcado como AFK`);
            return false;
        }
        
        const jugadorActual = room.getPlayerList().find(j => j.id === jugador.id);
        if (!jugadorActual || jugadorActual.team === 0) {
            console.log(`    ‚ùå Ya no est√° en equipo`);
            return false;
        }
        
        console.log(`    ‚úÖ Candidato V√ÅLIDO`);
        return true;
    });
    
    console.log(`\\nüìä RESULTADO: ${candidatos.length}/${equipoConMas.length} candidatos v√°lidos`);
    candidatos.forEach(c => console.log(`  ‚úÖ ${c.name}`));
    
    if (candidatos.length === 0) {
        console.log(`\\n‚ö†Ô∏è PROBLEMA DETECTADO: No hay candidatos v√°lidos (muchos jugadores AFK)`);
        anunciarGeneral('‚öñÔ∏è ‚ùå No se puede equilibrar: todos los jugadores est√°n AFK o son bots', "FFA500", "normal");
        return false;
    }
    
    return true;
}

console.log('\\n==================== ESCENARIO 4: SIMULACI√ìN DE BALANCE EXITOSO ====================');

function testBalanceExitoso() {
    console.log('\\nüîç TESTING: Simulaci√≥n de balance exitoso con candidatos v√°lidos');
    
    // Limpiar jugadores AFK para este test
    jugadoresAFK.clear();
    
    const equipos = obtenerCantidadJugadoresPorEquipo();
    const equipoConMas = equipos.rojo > equipos.azul ? equipos.jugadoresRojo : equipos.jugadoresAzul;
    const equipoConMenos = equipos.rojo > equipos.azul ? 2 : 1;
    const equipoConMenosNombre = equipos.rojo > equipos.azul ? 'AZUL' : 'ROJO';
    
    console.log(`\\n‚öñÔ∏è Iniciando balance: ${equipos.rojo}v${equipos.azul} (diferencia: ${equipos.diferencia})`);
    
    const candidatos = equipoConMas.filter(jugador => {
        return jugador && !esBotMejorado(jugador) && !jugadoresAFK.has(jugador.id);
    });
    
    console.log(`\\nüéØ Candidatos disponibles: ${candidatos.length}`);
    candidatos.forEach(c => console.log(`  - ${c.name}`));
    
    if (candidatos.length > 0) {
        // Calcular cu√°ntos jugadores mover
        const jugadoresAMover = Math.floor(equipos.diferencia / 2);
        const jugadorAMover = candidatos[0]; // Seleccionar el primero
        
        console.log(`\\nüîÑ Moviendo ${jugadorAMover.name} al equipo ${equipoConMenosNombre}...`);
        
        // Marcar movimiento como iniciado por bot
        movimientoIniciadorPorBot.add(jugadorAMover.id);
        
        // Ejecutar movimiento
        room.setPlayerTeam(jugadorAMover.id, equipoConMenos);
        
        // Verificar resultado
        const equiposPostBalance = obtenerCantidadJugadoresPorEquipo();
        console.log(`\\nüìä Post-balance: Rojo=${equiposPostBalance.rojo}, Azul=${equiposPostBalance.azul}, Diferencia=${equiposPostBalance.diferencia}`);
        
        if (equiposPostBalance.diferencia <= 1) {
            console.log(`\\n‚úÖ BALANCE EXITOSO: Diferencia reducida de ${equipos.diferencia} a ${equiposPostBalance.diferencia}`);
            anunciarGeneral('‚úÖ Equipos equilibrados correctamente', "90EE90", "normal");
            return true;
        }
    }
    
    return false;
}

// ========== EJECUTAR TESTS ==========
console.log('\\nüéÆ EJECUTANDO TESTS...');

console.log('\\n' + '='.repeat(60));
const test1 = testBalanceConEsBotOriginal();

console.log('\\n' + '='.repeat(60));
const test2 = testBalanceConEsBotMejorado();

console.log('\\n' + '='.repeat(60));
const test3 = testBalanceConJugadoresAFK();

console.log('\\n' + '='.repeat(60));
const test4 = testBalanceExitoso();

// ========== RESUMEN DE RESULTADOS ==========
console.log('\\n' + 'üéØ'.repeat(30));
console.log('üìä RESUMEN DE TESTS:');
console.log('üéØ'.repeat(30));
console.log(`Test 1 - esBot original: ${test1 ? '‚úÖ PAS√ì' : '‚ùå FALL√ì'}`);
console.log(`Test 2 - esBot mejorado: ${test2 ? '‚úÖ PAS√ì' : '‚ùå FALL√ì'}`);
console.log(`Test 3 - Jugadores AFK: ${test3 ? '‚úÖ PAS√ì' : '‚ùå FALL√ì'}`);
console.log(`Test 4 - Balance exitoso: ${test4 ? '‚úÖ PAS√ì' : '‚ùå FALL√ì'}`);

// ========== DIAGN√ìSTICO Y RECOMENDACIONES ==========
console.log('\\n' + 'üí°'.repeat(30));
console.log('üí° DIAGN√ìSTICO Y RECOMENDACIONES:');
console.log('üí°'.repeat(30));

if (!test1 && test2) {
    console.log('üîß PROBLEMA IDENTIFICADO: La funci√≥n esBot original es demasiado restrictiva');
    console.log('   - Solo detecta bots con nombre "HOST LNB" o ID 0');
    console.log('   - Recomendaci√≥n: Usar la funci√≥n esBot mejorada por defecto');
}

if (!test3) {
    console.log('üîß PROBLEMA IDENTIFICADO: Demasiados jugadores marcados como AFK');
    console.log('   - El sistema AFK puede estar siendo muy agresivo');
    console.log('   - Recomendaci√≥n: Revisar l√≥gica de detecci√≥n AFK o ajustar tiempos');
}

if (test4) {
    console.log('‚úÖ CONFIRMADO: El balance funciona correctamente cuando hay candidatos v√°lidos');
    console.log('   - El problema est√° en la fase de filtrado de candidatos');
}

console.log('\\nüéØ PR√ìXIMOS PASOS:');
console.log('1. Implementar funci√≥n esBot mejorada por defecto');
console.log('2. Agregar logs m√°s detallados para debugging');
console.log('3. Considerar l√≥gica de fallback cuando no hay candidatos');
console.log('4. Revisar configuraci√≥n del sistema AFK');

console.log('\\n‚úÖ TEST COMPLETADO');
